

/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */
package com.spotjoe;
import java.awt.*;
import java.awt.event.ActionEvent;

import javax.swing.JOptionPane;

import org.opencv.core.Core;

import com.sun.xml.internal.ws.client.sei.ValueSetter;

public class ImageApplication extends Frame
{
    //Some Class Variables
    Image img; //represents current image working on.
    
    //Class to display current image
    ImageFrame frame_image_display = new ImageFrame();  //YOU MUST CREATE
    ImageFrame result = new ImageFrame("Result");
    //Class to hold image data to be able to
    //manipulate
    ImageData activeImage ;  //YOU MUST CREATE********
    ImageData backupImage;

	// Used for addNotify check.
	boolean fComponentsAdjusted = false;
	
	//{{DECLARE_CONTROLS
	java.awt.FileDialog openFileDialog1 = new java.awt.FileDialog(this);
	java.awt.Label label_title = new java.awt.Label();
	//}}
	
	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
	java.awt.Menu menu1 = new java.awt.Menu();
	java.awt.MenuItem openMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem saveMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem separatorMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();
	java.awt.Menu menu3 = new java.awt.Menu();
	java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();
	//}}
	
	//
//	MenuItem exitItem = new MenuItem();

	Menu editMenu = new Menu();
	Menu procMenu = new Menu();

	MenuItem undoItem = new MenuItem();
	MenuItem thredholdItem = new MenuItem();
	MenuItem negativeItem = new MenuItem();
	MenuItem edgeItem = new MenuItem();
	MenuItem stretchItem = new MenuItem();
	MenuItem brighten = new MenuItem();
	
    
	public ImageApplication()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(405,305);
		setVisible(false);
		openFileDialog1.setMode(FileDialog.LOAD);
		openFileDialog1.setTitle("Open");
		//$$ openFileDialog1.move(24,312);
		label_title.setText("Welcome to Image Toolkit");
		add(label_title);
		label_title.setFont(new Font("Dialog", Font.BOLD, 20));
		label_title.setBounds(84,36,245,51);
		//$$ openFileDialog2.move(40,277);
		setTitle("AWT Application");
		//}}
		
		//{{INIT_MENUS
		menu1.setLabel("File");
		menu1.add(openMenuItem);
		openMenuItem.setLabel("Open...");
		openMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_O,false));
		menu1.add(saveMenuItem);
		saveMenuItem.setEnabled(false);
		saveMenuItem.setLabel("Save");
		saveMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S,false));
		menu1.add(separatorMenuItem);
		separatorMenuItem.setLabel("-");
		menu1.add(exitMenuItem);
		exitMenuItem.setLabel("Exit");
		mainMenuBar.add(menu1);

		//$$ mainMenuBar.move(0,312);
		mainMenuBar.add(editMenu);
		editMenu.add(undoItem);
		editMenu.setLabel("Edit");
		undoItem.setLabel("Undo");
		undoItem.setEnabled(false);
		
		
		
		procMenu.setLabel("Proccess");
		procMenu.add(thredholdItem);
		procMenu.add(negativeItem);
		procMenu.add(edgeItem);
		procMenu.add(stretchItem);
		procMenu.add(brighten);

		thredholdItem.setLabel("Thredhold");
		negativeItem.setLabel("Negative");
		edgeItem.setLabel("Edge Detect");
		stretchItem.setLabel("Contrast Stretch");
		brighten.setLabel("Brighen");
		procMenu.setEnabled(false);
		
		mainMenuBar.add(procMenu);
		
		menu3.setLabel("Help");
		menu3.add(aboutMenuItem);
		aboutMenuItem.setLabel("About...");
		mainMenuBar.add(menu3);
		setMenuBar(mainMenuBar);
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		openMenuItem.addActionListener(lSymAction);
		exitMenuItem.addActionListener(lSymAction);
		aboutMenuItem.addActionListener(lSymAction);
		undoItem.addActionListener(lSymAction);
		thredholdItem.addActionListener(lSymAction);
		negativeItem.addActionListener(lSymAction);
		edgeItem.addActionListener(lSymAction);
		stretchItem.addActionListener(lSymAction);
		brighten.addActionListener(lSymAction);
		//}}
		
		
		//Activate OpenCV
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
		//create frame to display image in
		//frame_image_display = new ImageFrame();
		//frame_image_display.setVisible(false);
	}
	
	public ImageApplication(String title)
	{
		this();
		setTitle(title);
	}
	
    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}	
		super.setVisible(b);
	}
	
	static public void main(String args[])
	{
		try
		{
			//Create a new instance of our application's frame, and make it visible.
    		(new ImageApplication()).setVisible(true);
		}
		catch (Throwable t)
		{
			System.err.println(t);
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}
	
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	

	
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ImageApplication.this)
				ImageApplication_WindowClosing(event);
		}
	}
	
	void ImageApplication_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		ImageApplication_WindowClosing_Interaction1(event);
	}


	void ImageApplication_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			// QuitDialog Create and show as modal
			(new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == openMenuItem)
				openMenuItem_ActionPerformed(event);
			else if (object == aboutMenuItem)
				aboutMenuItem_ActionPerformed(event);
			else if (object == exitMenuItem)
				exitMenuItem_ActionPerformed(event);
			else if (object == undoItem) {
				undo_Action(event);
			} else if (object == thredholdItem) {
				thredhold_Action(event);
			} else if (object == negativeItem) {
				negative_Action(event);
			} else if (object == edgeItem) {
				edge_Action(event);
			} else if (object == stretchItem) {
				stretch_Action(event);
			}else if (object == brighten) {
				brighten_Action(event);
			}

		}
	}
	
	void openMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openMenuItem_ActionPerformed_Interaction1(event);
	}

    //Method to open Image, either JPEG or GIF
    //loads image into img class variable and
    //calls method to display the image in a
    //new frame, called frame_image_display.

	void openMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// OpenFileDialog Create and show as modal
		    int		defMode         = openFileDialog1.getMode();
		    String	defTitle        = openFileDialog1.getTitle();
		    String defDirectory     = openFileDialog1.getDirectory();
		    String defFile          = "*.jpg;*.gif";

		    openFileDialog1 = new java.awt.FileDialog(this, defTitle, defMode);
		    openFileDialog1.setDirectory(defDirectory);
		    openFileDialog1.setFile(defFile);
		    openFileDialog1.setVisible(true);
		    
		    int width, height;
			 
		
		    //Print out to console the name of file selected
		    String Filename1 = (openFileDialog1.getDirectory()).concat(openFileDialog1.getFile());
		    String saveFileName = Filename1; //openFileDialog1.getDirectory() + "save.jpg";
		    System.out.println("Opening: " + Filename1);
		    
			 
		    //Open up image...INSTEAD use Media Tracker
		    //to make sure that image really does load
		    img = (java.awt.Toolkit.getDefaultToolkit()).getImage(Filename1);
		    MediaTracker tracker = new MediaTracker(this);
	        tracker.addImage(img, 0);
	        try {
                tracker.waitForID(0); //wait until image loaded
            }catch (InterruptedException e)
             { System.out.println("Can't load image " + Filename1); 
               return; }
	
		    
		    
		    //YOU code, set image for  frame_image_display
		    
//		    frame_image_display.setImage(img);
//		    frame_image_display.setVisible(true);
    		procMenu.setEnabled(true);
    	        			 	
    
		   height = img.getHeight(frame_image_display);
		   width = img.getWidth(frame_image_display);
		
		    //Create image_data object in which you  **** TO DO ***** YOU MUST DO ******
		    //store the data you wish to actually
		    //manipulate
		    activeImage  = new ImageData(img, "JPEG",saveFileName, height, width);
		    backupImage = new ImageData(height,width);
		    backupImage.setData(activeImage .getData());
		    //activeImage .brighten(100);
		    
		    frame_image_display.setImage(backupImage.createImage());
		    frame_image_display.setVisible(true);
		    
	        	    
	        //Enable all of your GUI components for image operations
		   
//		    
//		    activeImage .saveToFile();
		
		} catch (Exception e) {
		}
	}


	void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutMenuItem_ActionPerformed_Interaction1(event);
	}


	void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// AboutDialog Create and show as modal
			(new AboutDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}
	
	
	void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitMenuItem_ActionPerformed_Interaction1(event);
	}


	void exitMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// QuitDialog Create and show as modal
		    (new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

	void undo_Action(ActionEvent event) {
		activeImage.setData(backupImage.getData());
		result.setImage(activeImage.createImage());		
	}

	void thredhold_Action(ActionEvent event) {

		// dispose
		int threshold = -1;
		String valueStr = null;
		do {
			valueStr = JOptionPane
					.showInputDialog("Pleas select the threahold between 0 ~ 255.");
			if (valueStr == null) {
				break;
			}
			threshold = Integer.parseInt(valueStr);
			if (threshold < 0 || threshold > 255) {
				JOptionPane.showMessageDialog(null,
						"Pleas input number 0 ~ 255", "Exceed Boundary",
						JOptionPane.ERROR_MESSAGE);
			}

		} while (threshold < 0 || threshold > 255);
		
		if (valueStr != null) {
			backupImage.setData(activeImage.getData());
			undoItem.setEnabled(true);
			activeImage.threshold(threshold);
			result.setImage(activeImage.createImage());
			result.setVisible(true);
		}
		
	}

	void negative_Action(ActionEvent event) {
		backupImage.setData(activeImage .getData());
		undoItem.setEnabled(true);
		
		activeImage.negate();
		result.setImage(activeImage.createImage());
		result.setVisible(true);
	}

	void edge_Action(ActionEvent event) {
		String valueStr = JOptionPane
				.showInputDialog("Pleas input a sigma value, which decide the effect of edge detection");
		if (valueStr == null) {
			return;
		}
		double sigma = 0.4;
		try{
			sigma = Double.parseDouble(valueStr);
		}
		catch(Exception x){
			
		}
		backupImage.setData(activeImage .getData());
		undoItem.setEnabled(true);
		activeImage.sigma = sigma;
		activeImage.edge();
		
		//sobel
		ImageFrame sobelFrame = new ImageFrame("Sobel kernel");
		sobelFrame.setImage(activeImage.getSobelImage());
		sobelFrame.setVisible(true);
		
		//edge
		result.setImage(activeImage.getEdgeImage());
		result.setVisible(true);
	}

	void stretch_Action(ActionEvent event) {
	
		// dispose
		double threshold = 1;
		String valueStr = null;

		Object[] options = { "Up", "Down" };
		int response = JOptionPane.showOptionDialog(this, "Choose one",
				"Contrast", JOptionPane.YES_OPTION,
				JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

		if (response == 0) {
			threshold = 1.2;
		} else if (response == 1) {
			threshold = 0.8;
		} else {
			return;
		}


		// back up
		backupImage.setData(activeImage.getData());
		undoItem.setEnabled(true);

		activeImage.contrast(threshold);
		result.setImage(activeImage.createImage());
		result.setVisible(true);
		

	}
	
	void brighten_Action(ActionEvent event){
		backupImage.setData(activeImage .getData());
		undoItem.setEnabled(true);
		activeImage.brighten(100);
		result.setImage(activeImage .createImage());
		result.setVisible(true);
	}
}

